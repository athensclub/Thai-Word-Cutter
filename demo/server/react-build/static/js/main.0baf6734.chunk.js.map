{"version":3,"sources":["components/loading_spinner.gif","components/DemoForm.tsx","components/Output.tsx","components/LoadingPane.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DemoForm","props","state","inputText","updateInputText","bind","onSubmit","e","preventDefault","setText","this","setResultText","_","setLoading","fetch","URLSearchParams","text","then","res","a","json","k","reply","temp","result","JSON","parse","join","persist","setState","target","value","style","paddingTop","Form","Label","Control","type","placeholder","onChange","Button","variant","React","Component","Output","Jumbotron","Container","color","LoadingPane","Image","src","loadingCircular","App","outputText","loading","setOutputText","str","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0baf6734.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading_spinner.1cfb09c8.gif\";","import React from 'react';\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport interface Props{\r\n    setResultText?: (str: string) => void;\r\n    setLoading?: (loading: boolean) => void;\r\n}\r\n\r\nexport interface States{\r\n    inputText: string\r\n}\r\n\r\nexport class DemoForm extends React.Component<Props,States> {\r\n\r\n    constructor(props: Props){\r\n        super(props);\r\n        this.state = {\r\n            inputText: \"\"\r\n        };\r\n        this.updateInputText = this.updateInputText.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onSubmit(e: React.FormEvent<HTMLElement>): void{\r\n        e.preventDefault();\r\n        let setText = this.props.setResultText ?? (_ => {});\r\n        let setLoading = this.props.setLoading ?? (_ => {});\r\n        setLoading(true);\r\n        fetch('https://thaicutter-server.herokuapp.com/?' + new URLSearchParams({text: this.state.inputText}))\r\n        .then(async res => {\r\n            let reply = await res.json();\r\n            let temp = '';\r\n            for(let k in reply){\r\n                temp += reply[k];\r\n            }\r\n            let result = JSON.parse(temp);\r\n            setText(result['tokenized'].join('|'));\r\n            setLoading(false);\r\n        });\r\n    }\r\n\r\n    updateInputText(e: React.ChangeEvent<HTMLInputElement>){\r\n        e.persist();\r\n        this.setState((state) => ({\r\n            inputText: e.target.value\r\n        }));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <div style={{paddingTop: \"10vh\"}}>        \r\n            <Form onSubmit={this.onSubmit}>\r\n                <Form.Label>Input Text</Form.Label>\r\n                <Form.Control type=\"text\" placeholder=\"Write Text Here\" onChange={this.updateInputText}></Form.Control>\r\n                <Button variant=\"primary\" type=\"submit\">Submit</Button>\r\n            </Form>\r\n        </div>);\r\n    }\r\n\r\n}\r\n\r\nexport default DemoForm;\r\n","import React from 'react';\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nexport interface Props{\r\n    text: string\r\n}\r\n\r\nexport interface States{}\r\n\r\nexport class Output extends React.Component<Props,States>{\r\n\r\n    render(){\r\n        return (\r\n            <div style={{paddingTop: \"10vh\"}}>\r\n                <Jumbotron>\r\n                    <Container>\r\n                        <p style={{color: 'black'}}>{this.props.text}</p>\r\n                    </Container>\r\n                </Jumbotron>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Output;\r\n","import React from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport loadingCircular from './loading_spinner.gif';\r\n\r\nexport interface Props{}\r\n\r\nexport interface States{}\r\n\r\nexport class LoadingPane extends React.Component<Props,States>{\r\n\r\n    render(){\r\n        return (\r\n            <div style={{paddingTop: \"10vh\"}}>\r\n                <Jumbotron>\r\n                    <Container>\r\n                        <h3 style={{color: 'black'}}>Generating Results... Please wait</h3>\r\n                        <Image src={loadingCircular}></Image>\r\n                    </Container>\r\n                </Jumbotron>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LoadingPane;\r\n","import React from 'react';\nimport './App.css';\nimport DemoForm from \"./components/DemoForm\";\nimport Output from \"./components/Output\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LoadingPane from './components/LoadingPane';\n\ninterface Props{}\n\ninterface States{\n  outputText: string,\n  loading: boolean\n}\n\nclass App extends React.Component<Props,States>{\n\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      outputText: \"The output will be shown here.\",\n      loading: false\n    };\n\n    this.setOutputText = this.setOutputText.bind(this);\n    this.setLoading = this.setLoading.bind(this);\n  }\n\n  setOutputText(str: string): void{\n    this.setState(state => ({\n      outputText: str,\n      loading: state.loading\n    }));\n  }\n\n  setLoading(loading: boolean): void{\n    this.setState(state => ({\n      outputText: state.outputText,\n      loading: loading\n    }))\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\n          { !this.state.loading ?\n            <DemoForm setResultText={this.setOutputText} setLoading={this.setLoading}></DemoForm> :\n            <LoadingPane></LoadingPane>}\n          <Output text={this.state.outputText}></Output>\n        </header>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}